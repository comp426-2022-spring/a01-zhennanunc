{
  "tests": [
    {
      "name": "Testing Autograder",
      "setup": "SHELL=/bin/bash",
      "run": "echo \"THIS IS ONLY A TEST. SCORES MAY ADJUST IF AUTOGRADER IS UPDATED\"",
      "input": "",
      "output": "",
      "comparison": "included",
      "timeout": 10,
      "points": null
    },
    {
      "name": "Run server listening on randomly-assigned port",
      "setup": "SHELL=/bin/bash && npm install",
      "run": "PORT=\"$(shuf -i 2000-65535 -n 1)\"; (timeout --signal=SIGINT 5 node server.js --port=$PORT; exit 0) & sleep 1s && curl -vI http://localhost:${PORT} && sleep 5s",
      "input": "",
      "output": "[Pp]ort(\\s|\\S)([0-9]{4,5})\\nHTTP\\/(1.1|2) 200(\\sOK)?\\nContent-Type: text\\/html",
      "comparison": "regex",
      "timeout": 10,
      "points": 10000
    },
    {
      "name": "Status code",
      "setup": "",
      "run": "PORT=\"$(shuf -i 2000-65535 -n 1)\"; (timeout --signal=SIGINT 5 node server.js --port=$PORT; exit 0) & sleep 1s && curl -I http://localhost:${PORT} && sleep 5s",
      "input": "",
      "output": "HTTP\\/(1.1|2)\\s*200\\s*(OK)?",
      "comparison": "regex",
      "timeout": 10,
      "points": 10000
    },
    {
      "name": "Content type",
      "setup": "",
      "run": "PORT=\"$(shuf -i 2000-65535 -n 1)\"; (timeout --signal=SIGINT 5 node server.js --port=$PORT; exit 0) & sleep 1s && curl -I http://localhost:${PORT} && sleep 5s",
      "input": "",
      "output": "Content-Type: text\\/html",
      "comparison": "regex",
      "timeout": 10,
      "points": 10000
    },
    {
      "name": "Table check",
      "setup": "",
      "run": "PORT=\"$(shuf -i 2000-65535 -n 1)\"; (timeout --signal=SIGINT 5 node server.js --port=$PORT; exit 0) & sleep 1s && curl -v http://localhost:${PORT} && sleep 5s",
      "input": "",
      "output": "<td>[Zz]<\\/td>",
      "comparison": "regex",
      "timeout": 10,
      "points": 10000
    },
    {
      "name": "Error handling",
      "setup": "",
      "run": "mv www wwwtf; PORT=\"$(shuf -i 2000-65535 -n 1)\"; node server.js --port=$PORT 2>&1",
      "input": "",
      "output": "[Ee]r{2}or.*no\\ssuch\\sfile\\sor\\sdirectory.*\\.\\/www\\/index\\.html",
      "comparison": "regex",
      "timeout": 10,
      "points": 10000
    },
    {
      "name": "Error problem and fix. See message below.",
      "setup": "",
      "run": "printf \"If your server script is failing the last test, remove `process.exit(1)`\" ; printf \"from the script entirely. It is causing the autograder to catch\" ; printf \"the error that it is sending, which the autograder does by design.\" ; printf \"Since it is an error, it makes the autograder fail the test.\" ; printf \"\" ; printf \"The problem with this approach is that I am INTENTIONALLY creating\" ; printf \"the conditions for an error to see how you are doing error handling.\" ; printf \"\" ; printf \"¯\\_(ツ)_/¯\" ; printf \"\" ; printf \"So, it is totally fine to remove `process.exit(1)` entirely.\" ",
      "input": "",
      "output": "",
      "comparison": "included",
      "timeout": 10,
      "points": null
    }
  ]
}